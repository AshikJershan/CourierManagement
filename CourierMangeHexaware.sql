CREATE DATABASE  CourierManagementSystem

--TASK 1

--CREATE USER TABLE
CREATE TABLE USERS(
USERID INT IDENTITY PRIMARY KEY,
FIRSTNAME VARCHAR(20),
SECONDNAME VARCHAR(20),
EMAIL VARCHAR(100)UNIQUE,
PASSWORDS VARCHAR(100),
CONTACTNUMBER VARCHAR(100),
CITY VARCHAR(100),
ZIPCODE INT,
STATE VARCHAR(100))

--CREATE COURIER TABLE
CREATE TABLE COURIERS(
COURIERID INT IDENTITY PRIMARY KEY,
SENDERNAME VARCHAR(20),
SENDERCITY VARCHAR(20),
SENDERSTATE VARCHAR(20),
RECEIVERNAME VARCHAR(20),
RECEIVERCITY VARCHAR(20),
RECEIVERSTATE VARCHAR(20),
WEIGHTS DECIMAL(5,2),
STATUS VARCHAR(50),
TRACKINGNUMBER VARCHAR(50)UNIQUE,
DELIVERYDATE DATE)

--CREATE COURIER SERVICES TABLE
CREATE TABLE COURIERSERVICES(
SERVICEID INT IDENTITY PRIMARY KEY,  
SERVICENAME VARCHAR(100),  
COST DECIMAL(8, 2)) 

--CREATE EMPLOYEE TABLE
CREATE TABLE EMPLOYEE(
EMPLOYEEID INT IDENTITY PRIMARY KEY,
NAMES VARCHAR(50),
EMAIL VARCHAR(50),
CONTACTNUMBER VARCHAR(50),
ROLES VARCHAR(50),
SALARY DECIMAL(10,2))

--CREATE LOCATION TABLE
CREATE TABLE LOCATIONS(
LOCATIONID INT IDENTITY PRIMARY KEY,
LOCATIONNAME VARCHAR(100),
CITY VARCHAR(50),
STATE VARCHAR(50))

--CREATE PAYMENT TABLE
CREATE TABLE PAYMENTS(
PAYMENTID INT IDENTITY PRIMARY KEY,
COURIERID INT,
LOCATIONID INT,
AMOUNT DECIMAL(10,2),
PAYMENTDATE DATE,
FOREIGN KEY(COURIERID)REFERENCES COURIERS(COURIERID),
FOREIGN KEY(LOCATIONID)REFERENCES LOCATIONS(LOCATIONID))

--TO ADD PACKAGE COLUMN IN COURIER TABLE
ALTER TABLE COURIERS
ADD PACKAGES VARCHAR(50)
SELECT * FROM COURIERS
 INSERT INTO COURIERS (PACKAGES) VALUES('DOCUMENT')
 UPDATE COURIERS 
 SET PACKAGES='PARCEL'
 WHERE COURIERID=10
 DELETE FROM COURIERS WHERE COURIERID=11


--INSERTING VALUES FOR USERS TABLE
INSERT INTO USERS VALUES('JOHN','EMILY','JOHNEMILY@GMAIL.COM','PASSWORD1','8891551718','CHENNAI',625232,'TAMILNADU'),
                        ('MICHEAL','BROWN','MICHEALBROWN@GMAIL.COM','PASSWORD2','6549451258','BENGALURU',560001,'KARNATAKA'),
						('ROHAN','SHARMA','ROHANSHARMA@GMAIL.COM','PASSWORD3','9787303937','MUMBAI',400001,'MAHARASHTRA'),
						('ARYAN','SING','ARYANSING@GMAIL.COM','PASSWORD4','9487203937','DELHI',110011,'DELHI'),
						('PRIYA','RAO','PRIYARAO@GMAIL.COM','PASSWORD5','9751497781','BENGALURU',560001,'KARNATAKA'),
						('KARAN','PATEL','KARANPATEL@GMAIL.COM','PASSWORD6','7451256215','AHMEDABAD',380001,'GUJARAT'),
						('RIYA','JOHN','RIYAJOHN@GMAIL.COM','PASSWORD7','8845126352','CHENNAI',600001,'TAMILNADU'),
						('ARJUN','KUMAR','ARJUNKUMAR@GMAIL.COM','PASSWORD8','9741778542','PUNE',411001,'MAHARASHTRA'),
						('SURESH','MENON','SURESHMENON@GMAIL.COM','PASSWORD9','8891551417','KOLKATA',700001,'WESTBENGAL'),
						('RAMESH','IYER','RAMESHIYER@GMAIL.COM','PASSWORD10','9787302565','COIMBATORE',641001,'TAMILNADU')

--INSERTING VALUES FOR COURIERS TABLE
INSERT INTO COURIERS VALUES('RAHUL','CHENNAI','TAMILNADU','AMRITHA','BENGALURU','KARNATAKA',2.0,'UNDELIVERED','CRT007','20241201'),
                            ('ROHITH','TRIVANDRUM','KERALA','SHANU','CHENNAI','TAMILNADU',1.8,'DELIVERYTODAY','CRT546','20241129'),
							('ASHIK','KOLKATA','WESTBENGAL','VIDYA','TRIVANDRUM','KERALA',1.4,'DELIVERYTODAY','CRT542','20241129'),
							('JERSHAN','CHENNAI','TAMILNADU','VARSHINI','PUNE','MAHARASHTRA',2.1,'UNDELIVERED','CRT748','20241205'),
							('SHRUTI','COIMBATORE','TAMILNADU','HASAN','DELHI','DELHI',2.2,'UNDELIVERED','CRT526','20241206'),
							('WILLIAM','TRIVANDRUM','KERALA','DHASAN','CHENNAI','TAMILNADU',4.0,'DELIVERYTODAY','CRT963','20241129'),
							('DAVIS','KOLKATA','WESTBENGAL','AJO','BENGALURU','KARNATAKA',1.4,'DELIVERYTODAY','CRT215','20241129'),
							('JAMES','CHENNAI','TAMILNADU','BROOKS','DELHI','DELHI',2.2,'UNDELIVERED','CRT456','20241218'),
							('JANE','TRIVANDRUM','KERALA','SMITH','PUNE','MAHARASHTRA',2.2,'UNDELIVERED','CRT432','20241201'),
							('VISHNU','COIMBATORE','TAMILNADU','PRIYAN','CHENNAI','TAMILNADU',2.2,'DELIVERYTODAY','CRT785','20241129')
--INSERTING VALUES FOR COURIERSERVICE TABLE
INSERT INTO COURIERSERVICES VALUES('DTDC',60.0),
                                   ('BLUEDART',80.0),
								   ('INDIANPOST',60.0),
								   ('DELHIVERY',64.0),
								   ('SHREEMARUTI',46.0)
--INSERTING VALUES FOR EMPLOYEE TABLE
INSERT INTO EMPLOYEE VALUES('JOHN','SAJEES@GMAIL.COM','7894561235','MARKETINGSPECIALIST',40000.0),
                           ('SHAGITH','SHAGITH@GMAIL.COM','9854745123','DELIVERYMANAGER',60000.0),
						   ('JEFFERY','JEFFERY@GMAIL.COM','7845125284','WAREHOUSEMANAGER',50000.0),
						   ('CLETO','CLETO@GMAIL.COM','9854712547','CUSTOMERSUPPORTAGENT',25000.0),
						   ('ARUL','ARUL@GMAIL.COM','8874541457','PACKAGEHANDLER',35000.0),
						   ('JUSTIN','JUSTIN@GMAIL.COM','7845857485','SUPPLYCHAINMANAGER',40000.0),
						   ('RESHMAN','RESHMAN@GMAIL.COM','9985471245','DATAANALYST',70000.0),
						   ('JOHN','JUTLIN@GMAIL.COM','7754124585','DISPATCHMANAGER',50000.0),
						   ('DHONI','DHONI@GMAIL.COM','8895147526','WAREHOUSEMANAGER',50000.0),
						   ('DINESH','DINESH@GMAIL.COM','8855447722','SALESMANAGER',71000.0)
UPDATE EMPLOYEE
SET EMAIL='JOHN1@GMAIL.COM'
WHERE EMPLOYEEID=1
--INSERTING VALUES FOR LOCATION TABLE
INSERT INTO LOCATIONS VALUES('MAINBRANCH','DELHI','DELHI'),
                            ('WAREHOUSE1','CHENNAI','TAMILNADU'),
							('RETAILSTORE','TRIVANDRUM','KERALA'),
							('DELIVERUHUB','BENGALURU','KARNATAKA'),
							('REGIONALOFFICE','CHENNAI','TAMILNADU'),
							('SORTINGCENTRE','COIMBATORE','TAMILNADU'),
							('DISTRIBUTIONCENTRE','KOCHI','KERALA'),
							('TRANSITHUB','KOCHI','KERALA'),
							('TIDELPARK','CHENNAI','TAMILNADU'),
							('ITCENTRE','TRIVANDRUM','KERALA')

INSERT INTO PAYMENTS VALUES(4,4,550,'20241122'),
                           (7,7,440,'20241205')


--TASK 2__Select,Where 

--1.LIST ALL CUSTOMERS
SELECT CONCAT_WS(' ',FIRSTNAME,SECONDNAME)AS NAME FROM USERS

--2.LIST ALL ORDERS FOR A SPECIFIC CUSTOMER
SELECT * FROM COURIERS WHERE SENDERNAME='ASHIK'

--3.LIST ALL COURIERS
SELECT * FROM COURIERS

--4.LIST ALL PACKAGES FOR A SPECIFIC ORDER
SELECT COURIERID,WEIGHTS,STATUS,TRACKINGNUMBER,DELIVERYDATE  FROM COURIERS WHERE COURIERID=4

--5.LIST ALL DELIVERIES FOR A SPECIFIC COURIER
SELECT COURIERID,DELIVERYDATE,STATUS FROM COURIERS WHERE COURIERID=8

--6.LIST ALL UNDELIVERED PACKAGES
SELECT * FROM COURIERS WHERE STATUS='UNDELIVERED'

--7.List all packages that are scheduled for delivery today
SELECT * FROM COURIERS WHERE STATUS='DELIVERYTODAY'

--8. List all packages with a specific status
SELECT * FROM COURIERS WHERE STATUS='UNDELIVERED'

--9.Calculate the total number of packages for each courier
SELECT COURIERID,COUNT(PACKAGES) AS TOTALPACKAGES
FROM COURIERS
GROUP BY COURIERID

--10. Find the average delivery time for each courier  
--paymentdate diff delivery date
SELECT AVG(DATEDIFF(DAY,P.PAYMENTDATE,C.DELIVERYDATE)) AS AVERAGEDELIVERYTIME,C.PACKAGES
FROM COURIERS AS C
JOIN PAYMENTS AS P ON
C.COURIERID=P.COURIERID
GROUP BY PACKAGES


--11. List all packages with a specific weight range
SELECT * FROM COURIERS WHERE WEIGHTS between 1.0 and 2.0

--12.Retrieve employees whose names contain 'John' 
SELECT * FROM EMPLOYEE WHERE NAMES='JOHN'

--13. Retrieve all courier records with payments greater than 500

SELECT * FROM COURIERS WHERE AMOUNT>500

--TASK 3__ GroupBy, Aggregate Functions, Having, Order By, where  

--14. Find the total number of couriers handled by each employee
SELECT E.EMPLOYEEID,E.NAMES,COUNT(C.COURIERID) AS TOTALCOURIERS
FROM EMPLOYEE AS E
LEFT JOIN COURIERS AS C
ON E.EMPLOYEEID=C.EMPLOYEEID
GROUP BY E.EMPLOYEEID,E.NAMES

--15. Calculate the total revenue generated by each location
SELECT SENDERCITY,SUM(AMOUNT) AS TOTALREVENUE
FROM COURIERS
GROUP BY SENDERCITY

--16. Find the total number of couriers delivered to each location. 

SELECT RECEIVERCITY,COUNT(RECEIVERCITY) AS TOTALCOURIERS
FROM COURIERS
GROUP BY RECEIVERCITY

--17. Find the courier with the highest average delivery time:  
SELECT AVG((DATEDIFF(DAY,P.PAYMENTDATE,C.DELIVERYDATE)))AS AVGDELIVDATE,C.PACKAGES
FROM COURIERS AS C
JOIN PAYMENTS AS P ON
C.COURIERID=P.COURIERID
GROUP BY PACKAGES
SELECT * FROM PAYMENTS
SELECT * FROM COURIERS

--18. Find Locations with Total Payments Less Than a Certain Amount 
SELECT RECEIVERCITY
FROM COURIERS
WHERE AMOUNT<500
GROUP BY RECEIVERCITY

--19. Calculate Total Payments per Location 
SELECT RECEIVERCITY,SUM(AMOUNT) AS TOTALPAYMENTS
FROM COURIERS
GROUP BY RECEIVERCITY

/*20. Retrieve couriers who have received payments totaling more than 1000 in a specific location 
(LocationID = X)*/
SELECT SENDERCITY,SUM(AMOUNT) AS TOTALAMOUNT
FROM COURIERS
WHERE SENDERCITY='CHENNAI'
GROUP BY SENDERCITY
HAVING SUM(AMOUNT)>1000


/*21. Retrieve couriers who have received payments totaling more than $1000 after a certain date 
(PaymentDate > 'YYYY-MM-DD')*/
SELECT SENDERCITY,SUM(AMOUNT) AS TOTALAMOUNT
FROM COURIERS
WHERE DELIVERYDATE>'20241128'
GROUP BY SENDERCITY
HAVING SUM(AMOUNT)>1000


/*22. Retrieve locations where the total amount received is more than $5000 before a certain date 
(PaymentDate > 'YYYY-MM-DD')*/
SELECT SENDERCITY,SUM(AMOUNT) AS TOTALAMOUNT
FROM COURIERS
WHERE DELIVERYDATE<'20241201'
GROUP BY SENDERCITY
HAVING SUM(AMOUNT)>1000

--TASK 4__ Inner Join,Full Outer Join, Cross Join, Left Outer Join,Right Outer Join  
--23. Retrieve Payments with Courier Information 
SELECT C.COURIERID,C.SENDERNAME,C.SENDERCITY,C.RECEIVERNAME,C.RECEIVERCITY,C.WEIGHTS,C.STATUS,P.PAYMENTID,P.AMOUNT,P.PAYMENTDATE
FROM COURIERS AS C
JOIN PAYMENTS AS P
ON C.COURIERID=P.COURIERID

--24. Retrieve Payments with Location Information  
SELECT L.LOCATIONID,L.LOCATIONNAME,L.CITY,P.AMOUNT,P.PAYMENTDATE
FROM LOCATIONS AS L
JOIN PAYMENTS AS P
ON L.LOCATIONID=P.LOCATIONID


--25. Retrieve Payments with Courier and Location Information  
SELECT C.COURIERID,C.SENDERNAME,C.SENDERCITY,C.RECEIVERNAME,C.RECEIVERCITY,C.WEIGHTS,C.TRACKINGNUMBER,P.PAYMENTID,P.AMOUNT,P.PAYMENTDATE,L.LOCATIONID,L.LOCATIONNAME
FROM COURIERS AS C
JOIN PAYMENTS AS P
ON C.COURIERID=P.COURIERID
JOIN LOCATIONS AS L
ON C.COURIERID=P.COURIERID

--26. List all payments with courier details 
SELECT C.COURIERID,C.SENDERNAME,C.SENDERCITY,C.WEIGHTS,C.STATUS,P.PAYMENTID,P.AMOUNT,P.PAYMENTDATE,CS.SERVICENAME
FROM COURIERS AS C
JOIN PAYMENTS AS P
ON C.COURIERID=P.COURIERID
JOIN COURIERSERVICES AS CS ON
CS.SERVICEID=C.SERVICEID

--27. Total payments received for each courier 
SELECT C.SENDERNAME,C.SENDERCITY,SUM(P.AMOUNT) AS TOTALPAYMENT
FROM COURIERS AS C
JOIN PAYMENTS AS P
ON C.COURIERID=P.COURIERID
GROUP BY C.SENDERNAME,C.SENDERCITY

--28. List payments made on a specific date 
SELECT * FROM PAYMENTS
WHERE PAYMENTDATE='20241122'

--29. Get Courier Information for Each Payment  
SELECT P.PAYMENTID,P.AMOUNT,P.PAYMENTDATE,C.COURIERID,C.SENDERNAME,C.SENDERCITY,C.RECEIVERNAME,C.RECEIVERCITY,C.WEIGHTS,C.STATUS
FROM COURIERS AS C
JOIN PAYMENTS AS P
ON C.COURIERID=P.COURIERID

--30. Get Payment Details with Location  
SELECT P.PAYMENTID,P.AMOUNT,P.PAYMENTDATE,L.LOCATIONID,L.LOCATIONNAME,L.CITY
FROM LOCATIONS AS L
JOIN PAYMENTS AS P
ON L.LOCATIONID=P.LOCATIONID

--31. Calculating Total Payments for Each Courier  
SELECT C.SENDERNAME,C.SENDERCITY,SUM(P.AMOUNT) AS TOTALPAYMENT
FROM COURIERS AS C
JOIN PAYMENTS AS P
ON C.COURIERID=P.COURIERID
GROUP BY C.SENDERNAME,C.SENDERCITY

--32. List Payments Within a Date Range  
SELECT PAYMENTID,AMOUNT,PAYMENTDATE FROM PAYMENTS
WHERE PAYMENTDATE BETWEEN '20241120'AND'20241201'

--33. Retrieve a list of all users and their corresponding courier records, including cases where there are no matches on either side  
SELECT U.USERID,U.FIRSTNAME,C.COURIERID,C.DELIVERYDATE,C.RECEIVERCITY,C.AMOUNT
FROM USERS U
FULL OUTER JOIN COURIERS AS C ON 
U.USERID=U.USERID
ORDER BY U.USERID,C.DELIVERYDATE
  


--34. Retrieve a list of all couriers and their corresponding services, including cases where there are no matches on either side  
SELECT C.COURIERID,C.SENDERNAME AS NAME,CS.SERVICEID,CS.SERVICENAME
FROM COURIERS AS C
JOIN COURIERSERVICES AS CS
ON C.COURIERID<=6
GROUP BY COURIERID,SENDERNAME,SERVICENAME



--35. Retrieve a list of all employees and their corresponding payments, including cases where there are no matches on either side 
SELECT E.EMPLOYEEID,E.NAMES AS EMPLOYEENAME,P.AMOUNT,P.PAYMENTID
FROM EMPLOYEE AS E
FULL OUTER JOIN PAYMENTS AS P
ON E.EMPLOYEEID=P.PAYMENTID

--36. List all users and all courier services, showing all possible combinations. 
SELECT C.SENDERNAME,C.SERVICEID,CS.SERVICENAME
FROM COURIERS AS C
LEFT JOIN COURIERSERVICES AS CS
ON C.SERVICEID=CS.SERVICEID

--37. List all employees and all locations, showing all possible combinations:  

SELECT E.EMPLOYEEID,E.NAMES,L.LOCATIONNAME,L.CITY 
FROM EMPLOYEE AS E
JOIN LOCATIONS AS L ON
E.EMPLOYEEID=L.LOCATIONID

--38. Retrieve a list of couriers and their corresponding sender information (if available)  
SELECT CS.SERVICEID,C.PACKAGES,CS.SERVICENAME,C.SENDERNAME,C.SENDERCITY,C.SENDERSTATE
FROM COURIERSERVICES AS CS
INNER JOIN COURIERS AS C
ON C.SERVICEID=CS.SERVICEID

--39. Retrieve a list of couriers and their corresponding receiver information (if available): 
SELECT CS.SERVICEID,C.PACKAGES,CS.SERVICENAME,C.RECEIVERNAME,C.RECEIVERCITY,C.RECEIVERSTATE
FROM COURIERSERVICES AS CS
INNER JOIN COURIERS AS C
ON C.SERVICEID=CS.SERVICEID

--40. Retrieve a list of couriers along with the courier service details (if available):  
SELECT C.COURIERID,C.SENDERNAME,C.SENDERCITY,C.RECEIVERNAME,
C.RECEIVERCITY,C.PACKAGES,C.SERVICEID,CS.SERVICENAME
FROM COURIERS AS C
INNER JOIN COURIERSERVICES AS CS 
ON C.SERVICEID=CS.SERVICEID

--41. Retrieve a list of employees and the number of couriers assigned to each employee:  
SELECT E.NAMES AS EMPLOYEENAME,COUNT(C.EMPLOYEEID)AS NUMBEROFCOURIERS
FROM EMPLOYEE AS E
JOIN COURIERS AS C
ON C.EMPLOYEEID=E.EMPLOYEEID
GROUP BY NAMES

--42. Retrieve a list of locations and the total payment amount received at each location: 
SELECT L.CITY,SUM(P.AMOUNT) AS PAYMENTRECEIVED
FROM LOCATIONS AS L
JOIN PAYMENTS AS P
ON P.LOCATIONID=L.LOCATIONID
GROUP BY CITY

--43. Retrieve all couriers sent by the same sender (based on SenderName). 
SELECT *
FROM COURIERS
WHERE SENDERNAME LIKE'%RAHUL%'

--44. List all employees who share the same role.
SELECT * FROM EMPLOYEE
WHERE ROLES like 'WAREHOUSEMANAGER'

--45. Retrieve all payments made for couriers sent from the same location. 
SELECT  L.CITY,SUM(P.AMOUNT) AS TOTALAMOUNT,COUNT(L.CITY) AS CITY
FROM PAYMENTS AS P 
JOIN LOCATIONS AS L ON P.LOCATIONID=L.LOCATIONID
GROUP BY CITY
HAVING COUNT(L.CITY)>1

--46. Retrieve all couriers sent from the same location (based on SenderAddress).  
SELECT SENDERCITY,PACKAGES,COUNT(SENDERNAME) AS COURIERS
FROM COURIERS 
GROUP BY SENDERCITY,PACKAGES
HAVING COUNT(*)>1

--47. List employees and the number of couriers they have delivered:  
SELECT E.NAMES,COUNT(C.SENDERNAME) 
FROM EMPLOYEE AS E
JOIN COURIERS AS C ON
C.EMPLOYEEID=E.EMPLOYEEID
GROUP BY NAMES

--48. Find couriers that were paid an amount greater than the cost of their respective courier services 
SELECT C.COURIERID,C.SENDERNAME,C.AMOUNT AS AMOUNTPAID,CS.COST
FROM COURIERS AS C
JOIN COURIERSERVICES AS CS ON
C.SERVICEID=CS.SERVICEID
WHERE C.AMOUNT>CS.COST


	 --Scope: Inner Queries, Non Equi Joins, Equi joins,Exist,Any,All  
--49. Find couriers that have a weight greater than the average weight of all couriers 
SELECT COURIERID,SENDERNAME,WEIGHTS 
FROM COURIERS
WHERE WEIGHTS>(SELECT AVG(WEIGHTS) FROM COURIERS)
--50. Find the names of all employees who have a salary greater than the average salary:  
SELECT NAMES,SALARY
FROM EMPLOYEE WHERE SALARY>(SELECT AVG(SALARY) FROM EMPLOYEE)
--51. Find the total cost of all courier services where the cost is less than the maximum cost  
SELECT * FROM COURIERSERVICES
SELECT SERVICENAME,COST
FROM COURIERSERVICES WHERE COST<(SELECT MAX(COST) FROM COURIERSERVICES)
--52. Find all couriers that have been paid for 
SELECT C.COURIERID,C.SENDERNAME,C.SENDERCITY,C.WEIGHTS,P.PAYMENTID,P.AMOUNT
FROM COURIERS AS C
JOIN PAYMENTS AS P ON
P.COURIERID=C.COURIERID

--53. Find the locations where the maximum payment amount was made  
SELECT SENDERCITY FROM COURIERS
WHERE AMOUNT=(SELECT MAX(AMOUNT) FROM PAYMENTS)
GROUP BY SENDERCITY

/*54. Find all couriers whose weight is greater than the weight of all couriers sent by a
specific sender (e.g., 'SenderName'): */
SELECT COURIERID,SENDERNAME,SENDERCITY,WEIGHTS FROM COURIERS
WHERE WEIGHTS>ALL(SELECT WEIGHTS FROM COURIERS WHERE SENDERNAME='RAHUL')